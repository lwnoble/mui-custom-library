import React, { useEffect } from 'react';
import { ThemeProvider, createTheme } from '@mui/material/styles';
import { Box, Typography, Stack } from '@mui/material';
import ThemeButton from './ThemeButton';

// Sample CSS to demonstrate the use of CSS variables
const sampleCSS = `
/* These would be generated by your JsonToCssSplit script */
:root {
  --Button: #1976d2;
  --On-Button: #ffffff;
  --Button-Hover: #1565c0;
  --Button-Active: #0d47a1;
  --Button-Disabled: #e0e0e0;
  --On-Button-Disabled: #9e9e9e;
  --Focus-Outline: var(--Button);
  
  /* Button dimensions */
  --Button-Height: 40px;
  --Button-Small-Height: 32px;
  --Button-Minimum-Width: 64px;
  --Button-Border-Radius: 4px;
  --Button-Focus-Radius: 4px;
  --Button-Horizontal-Padding: 16px;
  --Button-Horizontal-Padding-With-Icon: 12px;
  --Button-Small-Horizontal-Padding: 12px;
  --Button-Small-Horizontal-Padding-With-Icon: 8px;
  --Button-Border: 1px;
  
  /* RGB values for opacity calculations */
  --Button-rgb: 25, 118, 210;
}

/* Example of a dark mode configuration */
[data-mode="dark"] {
  --Button: #90caf9;
  --On-Button: #000000;
  --Button-Hover: #64b5f6;
  --Button-Active: #42a5f5;
  --Button-Disabled: #424242;
  --On-Button-Disabled: #757575;
  --Focus-Outline: rgba(144, 202, 249, 0.5);
  --Button-rgb: 144, 202, 249;
}
`;

// Create an empty theme to satisfy MUI requirements
const theme = createTheme({});

/**
 * ThemeButtonDemo - Demonstrates the usage of ThemeButton with CSS variables
 */
const ThemeButtonDemo = () => {
  const [mode, setMode] = React.useState('light');
  
  // Apply the CSS variables to the document
  useEffect(() => {
    // Create a style element
    const style = document.createElement('style');
    style.textContent = sampleCSS;
    document.head.appendChild(style);
    
    // Clean up
    return () => {
      document.head.removeChild(style);
    };
  }, []);
  
  // Toggle between light and dark mode
  const toggleMode = () => {
    setMode(prevMode => prevMode === 'light' ? 'dark' : 'light');
    document.documentElement.setAttribute('data-mode', mode === 'light' ? 'dark' : 'light');
  };
  
  return (
    <ThemeProvider theme={theme}>
      <Box 
        sx={{ 
          p: 4, 
          minHeight: '100vh',
          bgcolor: mode === 'light' ? '#f5f5f5' : '#121212',
          color: mode === 'light' ? '#121212' : '#f5f5f5',
          transition: 'background-color 0.3s, color 0.3s'
        }}
      >
        <Typography variant="h4" gutterBottom>
          Theme Button Demo
        </Typography>
        
        <Box sx={{ mb: 3 }}>
          <ThemeButton onClick={toggleMode}>
            Switch to {mode === 'light' ? 'Dark' : 'Light'} Mode
          </ThemeButton>
        </Box>
        
        <Typography variant="h6" gutterBottom>
          Variants
        </Typography>
        
        <Stack direction="row" spacing={2} sx={{ mb: 4 }}>
          <ThemeButton variant="contained">Contained</ThemeButton>
          <ThemeButton variant="outlined">Outlined</ThemeButton>
          <ThemeButton variant="text">Text</ThemeButton>
        </Stack>
        
        <Typography variant="h6" gutterBottom>
          Sizes
        </Typography>
        
        <Stack direction="row" spacing={2} sx={{ mb: 4, alignItems: 'center' }}>
          <ThemeButton size="small">Small</ThemeButton>
          <ThemeButton size="medium">Medium</ThemeButton>
          <ThemeButton size="large">Large</ThemeButton>
        </Stack>
        
        <Typography variant="h6" gutterBottom>
          States
        </Typography>
        
        <Stack direction="row" spacing={2} sx={{ mb: 4 }}>
          <ThemeButton>Normal</ThemeButton>
          <ThemeButton disabled>Disabled</ThemeButton>
        </Stack>
      </Box>
    </ThemeProvider>
  );
};

export default ThemeButtonDemo;
