name: Generate CSS from Theme (Manual)

on:
  workflow_dispatch:
    inputs:
      message:
        description: 'Commit message'
        required: false
        default: 'Manual theme CSS generation'

# Add this section
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  generate-css:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Create output directory
        run: mkdir -p src/styles/theme-files
      
      - name: Generate CSS from theme.json
        run: node src/utils/JsonToCssSplit.js src/styles/theme.json src/styles/theme-files
      
      - name: Create theme loader
        run: |
          cat > src/styles/theme-files/theme-loader.js << 'EOF'
          /**
           * Dynamic CSS loader for theme files
           * Auto-generated
           */
          class ThemeLoader {
            constructor() {
              this.loadedStylesheets = new Map();
              this.defaultMode = 'light';
              this.defaultPlatform = this.detectPlatform();
              this.initialized = false;
            }
          
            /**
             * Detect the current platform
             * @returns {string} - Detected platform (desktop, mobile, etc.)
             */
            detectPlatform() {
              // Basic platform detection logic
              const isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);
              return isMobile ? 'mobile' : 'desktop';
            }
          
            /**
             * Load a CSS file dynamically
             * @param {string} fileName - The CSS file to load
             * @param {string} id - Unique identifier for the stylesheet
             * @returns {Promise} - Promise that resolves when the stylesheet is loaded
             */
            loadStylesheet(fileName, id) {
              return new Promise((resolve, reject) => {
                // If already loaded, resolve immediately
                if (this.loadedStylesheets.has(id)) {
                  resolve();
                  return;
                }
          
                const link = document.createElement('link');
                link.rel = 'stylesheet';
                link.href = fileName;
                link.id = id;
          
                link.onload = () => {
                  this.loadedStylesheets.set(id, link);
                  resolve();
                };
          
                link.onerror = () => {
                  reject(new Error(`Failed to load ${fileName}`));
                };
          
                document.head.appendChild(link);
              });
            }
          
            /**
             * Initialize the theme by loading base CSS
             * @returns {Promise} - Promise that resolves when base CSS is loaded
             */
            async initialize() {
              if (this.initialized) {
                return;
              }
          
              try {
                // Load base CSS first
                await this.loadStylesheet('base.css', 'theme-base');
                
                // Load system CSS
                await this.loadStylesheet('system.css', 'theme-system');
                
                this.initialized = true;
              } catch (err) {
                console.error('Error initializing theme:', err);
              }
            }
          
            /**
             * Set the current theme data attributes on the document
             * @param {string} mode - The mode to set
             * @param {string} platform - The platform to set
             */
            setThemeAttributes(mode, platform) {
              document.documentElement.setAttribute('data-mode', mode);
              document.documentElement.setAttribute('data-platform', platform);
            }
          
            /**
             * Load the appropriate CSS files based on settings
             * @param {Object} options - Configuration options
             * @param {string} [options.mode] - The mode to load (light, dark, etc.)
             * @param {string} [options.platform] - The platform to load (desktop, mobile, etc.)
             * @returns {Promise} - Promise that resolves when all stylesheets are loaded
             */
            async loadTheme(options = {}) {
              // Initialize if not already done
              await this.initialize();
              
              const mode = options.mode || this.defaultMode;
              const platform = options.platform || this.defaultPlatform;
          
              const promises = [];
          
              // Load mode CSS
              promises.push(
                this.loadStylesheet(`mode-${mode.toLowerCase()}.css`, `theme-mode-${mode}`)
                  .catch(err => console.warn(`Could not load mode CSS: ${err.message}`))
              );
          
              // Load platform CSS
              promises.push(
                this.loadStylesheet(`platform-${platform.toLowerCase()}.css`, `theme-platform-${platform}`)
                  .catch(err => console.warn(`Could not load platform CSS: ${err.message}`))
              );
          
              // Set data attributes on the document
              this.setThemeAttributes(mode, platform);
          
              return Promise.all(promises);
            }
          }
          
          // Create a global instance
          window.themeLoader = new ThemeLoader();
          
          // Auto-load theme based on default settings
          document.addEventListener('DOMContentLoaded', () => {
            window.themeLoader.loadTheme();
          });
          EOF
      
      - name: Check for changes
        id: git-check
        run: |
          git diff --quiet src/styles/theme-files || echo "changes=true" >> $GITHUB_OUTPUT
      
      - name: Commit changes if needed
        if: steps.git-check.outputs.changes == 'true'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add src/styles/theme-files/
          git commit -m "${{ github.event.inputs.message }}"
          git push