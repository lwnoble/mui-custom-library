name: Fix Missing convertSystemToCss Function

on:
  workflow_dispatch:
    inputs:
      commit_message:
        description: 'Commit message for the fix'
        default: 'Add missing convertSystemToCss function to JsonToCssSplit.js'
        required: true

jobs:
  fix-missing-function:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Create fix script
        run: |
          cat > fix-systemtocss.js << 'EOF'
          import fs from 'fs';
          import path from 'path';
          import { fileURLToPath } from 'url';

          // Get the directory of the current script
          const __filename = fileURLToPath(import.meta.url);
          const __dirname = path.dirname(__filename);
          
          async function addMissingFunction() {
            try {
              const filePath = path.join(__dirname, 'src', 'utils', 'JsonToCssSplit.js');
              console.log(`Reading JsonToCssSplit.js from ${filePath}`);
              
              // Read the file
              const fileContent = await fs.promises.readFile(filePath, 'utf8');
              console.log(`Successfully read file: ${fileContent.length} bytes`);
              
              // Create a backup
              await fs.promises.writeFile(`${filePath}.backup`, fileContent);
              console.log('Created backup of original JsonToCssSplit.js');
              
              // Find the export statement to locate where to add the function
              const exportMatch = fileContent.match(/export\s*{/);
              if (!exportMatch) {
                throw new Error('Could not find export statement in JsonToCssSplit.js');
              }
              
              // Add the missing convertSystemToCss function before the exports
              const convertSystemToCssFunc = `
/**
 * Convert System tokens to CSS custom properties
 * @param {Object} jsonContent - The parsed JSON content
 * @returns {string} - Generated CSS for system tokens
 */
function convertSystemToCss(jsonContent) {
  const systemDefaults = jsonContent['System/Default'];
  
  // Start building CSS
  let css = \`:root, ::after, ::before {\\n\`;
  
  // Minimum Target calculation
  css += \` /* System Variables */\\n\`;
  css += \` --Min-Target: min(min(var(--Desktop-Target), var(--PlatformTarget)), var(--Cognitive-Target));\\n\`;
  
  // Buttons
  if (systemDefaults && systemDefaults.Buttons) {
    const buttons = systemDefaults.Buttons;
    const buttonProps = [
      ['Button-Height', buttons['Button-Height']],
      ['Button-Minimum-Width', buttons['Button-Minimum-Width']],
      ['Button-Border-Radius', buttons['Button-Border-Radius']],
      ['Button-Focus-Radius', buttons['Button-Focus-Radius']],
      ['Button-Horizontal-Padding', buttons['Button-Horizontal-Padding']],
      ['Button-Horizontal-Padding-With-Icon', buttons['Button-Horizontal-Padding-With-Icon']],
      ['Button-Small-Height', buttons['Button-Small-Height']],
      ['Button-Small-Horizontal-Padding', buttons['Button-Small-Horizontal-Padding']],
      ['Button-Small-Horizontal-Padding-With-Icon', buttons['Button-Small-Horizontal-Padding-With-Icon']],
      ['Button-Border', {value: 2, type: 'number'}]
    ];
    
    buttonProps.forEach(([prop, propObj]) => {
      if (propObj) {
        const value = typeof propObj.value === 'string' && propObj.value.startsWith('{') 
          ? propObj.value.replace(/[{}]/g, '').replace(/\\./g, '-') 
          : propObj.value;
        
        css += \` --\${prop}: \${typeof value === 'number' ? \`\${value}px\` : \`var(--\${value})\`};\\n\`;
      }
    });
  }
  
  // Breakpoints
  if (systemDefaults && systemDefaults.Breakpoints) {
    const breakpointProps = ['Small', 'Medium', 'Large', 'Extra-Large', 'Extra-Small', 'Extra-Extra-Large'];
    
    breakpointProps.forEach(prop => {
      if (systemDefaults.Breakpoints[prop]) {
        css += \` --Breakpoints-\${prop.replace(' ', '-')}: \${systemDefaults.Breakpoints[prop].value}px;\\n\`;
      }
    });
  }
  
  // Close the CSS block
  css += \`}\\n\`;
  
  return css;
}
              `;
              
              // Insert the function before the export statement
              const fixedContent = fileContent.substring(0, exportMatch.index) + 
                                 convertSystemToCssFunc + 
                                 fileContent.substring(exportMatch.index);
              
              // Write the fixed file
              await fs.promises.writeFile(filePath, fixedContent, 'utf8');
              console.log('Successfully added missing convertSystemToCss function');
              
            } catch (error) {
              console.error('Error adding missing function:', error);
              process.exit(1);
            }
          }

          addMissingFunction();
          EOF
      
      - name: Run fix script
        run: |
          node fix-systemtocss.js
      
      - name: Verify the function was added
        run: |
          echo "Checking if the function was added:"
          grep -A 5 "function convertSystemToCss" src/utils/JsonToCssSplit.js || echo "Function not found"
      
      - name: Commit changes
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          git add src/utils/JsonToCssSplit.js
          
          # Check if there are any changes
          if [[ -n "$(git status --porcelain)" ]]; then
            echo "Changes detected"
            git commit -m "${{ github.event.inputs.commit_message }}"
            git push
          else
            echo "No changes detected"
          fi