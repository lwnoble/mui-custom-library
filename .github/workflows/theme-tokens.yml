name: Theme Tokens Conversion

on:
  pull_request:
    paths:
      - 'src/styles/theme.json'
  push:
    branches:
      - main
      - tokens-update
    paths:
      - 'src/styles/theme.json'
  workflow_dispatch:
    inputs:
      message:
        description: 'Commit message'
        required: false
        default: 'Update theme CSS files'

jobs:
  convert-tokens:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref || github.ref_name }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
          
      - name: Clean theme.json file
        run: |
          node -e "
            const fs = require('fs');
            const path = require('path');
            const themePath = path.join(process.cwd(), 'src', 'styles', 'theme.json');
            
            try {
              // Read the theme file
              const themeData = JSON.parse(fs.readFileSync(themePath, 'utf8'));
              
              // Log original structure
              console.log('Original theme.json sections:');
              console.log(Object.keys(themeData));
              
              // Remove \$themes section if it exists (instead of just emptying it)
              if (themeData.\$themes) {
                delete themeData.\$themes;
                console.log('Removed \$themes section from theme.json');
              } else {
                console.log('No \$themes section found');
              }
              
              // Remove \$metadata section if it exists
              if (themeData.\$metadata) {
                delete themeData.\$metadata;
                console.log('Removed \$metadata section from theme.json');
              } else {
                console.log('No \$metadata section found');
              }
              
              // Log the remaining sections for debugging
              console.log('Remaining theme.json sections:');
              console.log(Object.keys(themeData));
              
              // Write the cleaned file back
              fs.writeFileSync(themePath, JSON.stringify(themeData, null, 2));
              console.log('Wrote cleaned theme.json file');
            } catch (error) {
              console.error('Error processing theme.json:', error);
              process.exit(1);
            }
          "
      
      - name: Create output directory
        run: mkdir -p src/styles/theme-files
      
      - name: Fix JsonToCssSplit.js if needed
        run: |
          node -e "
            const fs = require('fs');
            const path = require('path');
            
            try {
              const filePath = path.join(process.cwd(), 'src', 'utils', 'JsonToCssSplit.js');
              console.log('Checking JsonToCssSplit.js for issues...');
              
              // Read the file
              const fileContent = fs.readFileSync(filePath, 'utf8');
              
              // Check for duplicate function definitions
              const convertSystemToCssMatches = fileContent.match(/function convertSystemToCss/g);
              if (convertSystemToCssMatches && convertSystemToCssMatches.length > 1) {
                console.log('WARNING: Multiple definitions of convertSystemToCss found. Removing duplicates...');
                
                // Keep only the first occurrence
                let newContent = fileContent;
                
                const functionPattern = /function\\s+convertSystemToCss\\s*\\(\\s*jsonContent\\s*\\)\\s*\\{[\\s\\S]*?(?=\\n\\})\\n\\}/g;
                const matches = [...fileContent.matchAll(new RegExp(functionPattern, 'g'))];
                
                if (matches.length > 1) {
                  console.log(`Found ${matches.length} occurrences of convertSystemToCss`);
                  
                  // Keep only the first occurrence
                  for (let i = 1; i < matches.length; i++) {
                    const match = matches[i][0];
                    newContent = newContent.replace(match, '// Duplicate function removed');
                  }
                  
                  // Write the fixed content
                  fs.writeFileSync(filePath, newContent);
                  console.log('Duplicate function definitions removed');
                }
              } else {
                console.log('No duplicate functions found in JsonToCssSplit.js');
              }
              
            } catch (error) {
              console.error(`Error checking JsonToCssSplit.js: ${error.message}`);
              // Don't exit - continue with the workflow even if this check fails
            }
          "
      
      - name: Convert theme tokens
        run: |
          echo "Running convert-theme-tokens.js..."
          node src/utils/convert-theme-tokens.js
      
      - name: Check generated files
        run: |
          echo "Generated CSS files:"
          find src/styles/theme-files -type f | sort
          
          echo "Content of theme-files directory:"
          ls -la src/styles/theme-files/
      
      - name: Commit changes
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          # Use custom commit message for manual dispatch, otherwise use default
          COMMIT_MESSAGE="${{ github.event.inputs.message || 'Update theme CSS files' }}"
          
          # Add all files in theme-files directory
          git add src/styles/theme-files/
          git add src/styles/theme.json
          
          # Check if there are any changes
          if [[ -n "$(git status --porcelain)" ]]; then
            echo "Changes detected"
            git commit -m "$COMMIT_MESSAGE"
            git push
          else
            echo "No changes detected"
          fi